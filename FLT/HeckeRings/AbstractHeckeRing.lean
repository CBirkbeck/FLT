/-
Copyright (c) 2024 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.GroupTheory.DoubleCoset
import Mathlib.GroupTheory.Commensurable
import Mathlib.Tactic.FinCases
import Mathlib.Algebra.BigOperators.Finsupp
/-

# Construction of Hecke rings following Shimura

We define Hecke rings abstractly as a ring of formal sums of double cosets `HgH`, with H a subgroup
of a group G, and `g` in a submonoid `Œî` of the commensurator of `H`.

In practice we might have `G = GL‚ÇÇ(‚Ñö)` (which will also be the relevant commensurator)
and `H = SL‚ÇÇ(‚Ñ§)`, and `Œî = Œî‚ÇÄ(N)` (this is where the condition on the determininat being positive
comes in).

## TODO

show they are rings (associativity is gonna be hard). golf/clean everything

-/
open Commensurable Classical Doset MulOpposite Set

open scoped Pointwise

namespace HeckeRing

variable {G : Type*} [Group G] (H : Subgroup G) (Œî : Submonoid G) (h‚ÇÄ : H.toSubmonoid ‚â§ Œî)
  (h‚ÇÅ : (Œî ‚â§ (commensurator H).toSubmonoid))

lemma ConjAct_smul_coe_Eq (g : G) :  ((ConjAct.toConjAct g ‚Ä¢ H) : Set G) = {g} * H * {g‚Åª¬π} := by
  ext x
  refine ‚ü® ?_, ?_‚ü© <;>  intro h
  ¬∑ rw [mem_smul_set] at h
    obtain ‚ü®a, ha‚ü© := h
    rw [ConjAct.smul_def, ConjAct.ofConjAct_toConjAct] at ha
    rw [‚Üê ha.2]
    simp only [singleton_mul, image_mul_left, mul_singleton, image_mul_right, inv_inv, mem_preimage,
      inv_mul_cancel_right, inv_mul_cancel_left, SetLike.mem_coe, ha.1]
  ¬∑ rw [mem_smul_set]
    use g‚Åª¬π * x * g
    rw [ConjAct.smul_def, ConjAct.ofConjAct_toConjAct]
    group
    simp only [singleton_mul, image_mul_left, mul_singleton, image_mul_right, inv_inv, mem_preimage,
      SetLike.mem_coe, Int.reduceNeg, zpow_neg, zpow_one, and_true] at *
    rw [‚Üê mul_assoc] at h
    exact h

lemma ConjAct_smul_elt_eq (h : H) : ConjAct.toConjAct (h : G) ‚Ä¢ H = H := by
  have : ConjAct.toConjAct (h : G) ‚Ä¢ (H : Set G) = H := by
    rw [ConjAct_smul_coe_Eq,Subgroup.singleton_mul_subgroup h.2,
      Subgroup.subgroup_mul_singleton (by simp)]
  rw [‚Üê Subgroup.coe_pointwise_smul] at this
  norm_cast at *


/-maybe call this commensurable pair??-/
/-- This is a pair cosisting of a subgroup `H` and a submonoid `Œî` of some group, such that
`H ‚â§ Œî ‚â§ commensurator H`. -/
structure ArithmeticGroupPair (G : Type*) [Group G]  where
  H : Subgroup G
  Œî : Submonoid G
  h‚ÇÄ : H.toSubmonoid ‚â§ Œî
  h‚ÇÅ : Œî ‚â§ (commensurator H).toSubmonoid

/--Given an arithmetic pair `P`, consisting of a subgroup `H` of `G` and a submonoid `Œî` of
the commensurator of H, this is  the data of a set in `G` equal to some double coset
`HgH`, with `g : Œî`. -/
structure T' (P : ArithmeticGroupPair G) where
  set : Set G
  eql : ‚àÉ elt : P.Œî,  set = Doset.doset (elt : G) P.H P.H

@[ext]
lemma ext (P : ArithmeticGroupPair G) (D1 D2 : T' P) (h : D1.set = D2.set):
  D1 = D2 := by
  cases D1
  cases D2
  simp at *
  exact h


/--Make an element of `T' H Œî` given an element `g : Œî`, i.e make `HgH`.  -/
def T_mk (P : ArithmeticGroupPair G) (g : P.Œî) : T' P := ‚ü®doset g P.H P.H, g, rfl‚ü©

/--The multiplicative identity. -/
def T_one (P : ArithmeticGroupPair G) : T' P := T_mk P (1 : P.Œî)

lemma smul_eq_mul_singleton (s : Set G) (g : G) : g ‚Ä¢ s = {g} * s := by
    rw [‚Üê Set.singleton_smul]
    exact rfl

lemma set_eq_iUnion_leftCosets (K : Subgroup G) (hK : K ‚â§ H) : (H : Set G) = ‚ãÉ (i : H ‚ß∏ K.subgroupOf H),
    (i.out' : G) ‚Ä¢ (K : Set G) := by
  ext a
  constructor
  ¬∑ intro ha
    simp only [mem_iUnion]
    use (‚ü®a, ha‚ü© : H)
    have := QuotientGroup.mk_out'_eq_mul (K.subgroupOf H) (‚ü®a, ha‚ü© : H)
    obtain ‚ü®h, hh‚ü© := this
    rw [hh]
    simp
    refine mem_smul_set.mpr ?h.intro.a
    have : (h : H) ‚Ä¢ (K : Set G) = K := by
      apply smul_coe_set
      simp
      refine Subgroup.mem_subgroupOf.mp ?ha.a
      simp only [SetLike.coe_mem]
    use h‚Åª¬π
    simp
    refine Subgroup.mem_subgroupOf.mp ?h.a
    exact SetLike.coe_mem h
  ¬∑ intro ha
    simp only [mem_iUnion] at ha
    obtain ‚ü®i, hi‚ü© := ha
    have :  Quotient.out' i ‚Ä¢ (K : Set G) ‚äÜ (H : Set G) := by
      intro a ha
      rw [mem_smul_set] at ha
      obtain ‚ü®h, hh‚ü© := ha
      rw [‚Üê hh.2]
      simp
      rw [show  Quotient.out' i ‚Ä¢ h =  Quotient.out' i * h by rfl]
      apply mul_mem
      simp
      apply hK hh.1
    exact this hi

lemma ConjAct_mul_self_eq_self (g : G) : ((ConjAct.toConjAct g ‚Ä¢ H) : Set G) *
    (ConjAct.toConjAct g ‚Ä¢ H) = (ConjAct.toConjAct g ‚Ä¢ H) := by
  rw [ConjAct_smul_coe_Eq , show {g} * (H : Set G) * {g‚Åª¬π} * ({g} * ‚ÜëH * {g‚Åª¬π}) = {g} * ‚ÜëH *
      (({g‚Åª¬π} * {g}) * ‚ÜëH) * {g‚Åª¬π} by simp_rw [‚Üê mul_assoc],Set.singleton_mul_singleton ]
  conv =>
    enter [1,1,2]
    simp
  conv =>
    enter [1,1]
    rw [mul_assoc, coe_mul_coe H]

lemma inter_mul_conjact_eq_conjact (g : G) : ((H : Set G) ‚à© (ConjAct.toConjAct g ‚Ä¢ H)) *
    (ConjAct.toConjAct g ‚Ä¢ H) = (ConjAct.toConjAct g ‚Ä¢ H) := by
  have := Set.inter_mul_subset (s‚ÇÅ := (H : Set G)) (s‚ÇÇ := (ConjAct.toConjAct g ‚Ä¢ H))
    (t := (ConjAct.toConjAct g ‚Ä¢ H))
  apply Subset.antisymm
  ¬∑ apply le_trans this
    simp only [ConjAct_mul_self_eq_self, le_eq_subset, inter_subset_right]
  ¬∑ refine subset_mul_right (ConjAct.toConjAct g ‚Ä¢ (H : Set G)) ?h‚ÇÇ.hs
    simp only [mem_inter_iff, SetLike.mem_coe]
    refine ‚ü®  Subgroup.one_mem H, Subgroup.one_mem (ConjAct.toConjAct g ‚Ä¢ H)‚ü©

lemma mul_singleton_cancel (g : G) (K L : Set G)  (h:  K * {g} = L * {g}) : K = L := by
  have h2 := congrFun (congrArg HMul.hMul h) {g‚Åª¬π}
  simp_rw [mul_assoc, Set.singleton_mul_singleton] at h2
  simpa using h2

lemma doset_eq_iUnion_leftCosets (g : G) : doset g H H =
  ‚ãÉ (i : (H ‚ß∏ (ConjAct.toConjAct g ‚Ä¢ H).subgroupOf H)), (i.out' * g) ‚Ä¢ (H : Set G) := by
  rw [doset]
  have := set_eq_iUnion_leftCosets H (((ConjAct.toConjAct g ‚Ä¢ H).subgroupOf H).map H.subtype)
  simp only [Subgroup.subgroupOf_map_subtype, inf_le_right, Subgroup.coe_inf,
    Subgroup.coe_pointwise_smul, true_implies] at this
  have h2 := congrFun (congrArg HMul.hMul this) ((ConjAct.toConjAct g ‚Ä¢ H) : Set G)
  rw [iUnion_mul, inter_comm] at h2
  apply mul_singleton_cancel g‚Åª¬π
  rw [ConjAct_smul_coe_Eq ] at *
  simp_rw [‚Üê mul_assoc] at h2
  rw [h2]
  have : (Subgroup.map H.subtype ((ConjAct.toConjAct g ‚Ä¢ H).subgroupOf H)).subgroupOf H =
    (ConjAct.toConjAct g ‚Ä¢ H).subgroupOf H := by
    simp
  rw [this]
  have h1 : ‚àÄ (i : H ‚ß∏ (ConjAct.toConjAct g ‚Ä¢ H).subgroupOf H),
    ((i.out') : G) ‚Ä¢ ((H : Set G) ‚à© ({g} * ‚ÜëH * {g‚Åª¬π})) * {g} * ‚ÜëH * {g‚Åª¬π} =
      (‚Üë(Quotient.out' i) * g) ‚Ä¢ ‚ÜëH * {g‚Åª¬π} := by
    intro i
    have := inter_mul_conjact_eq_conjact H g
    rw [ConjAct_smul_coe_Eq ] at this
    have hr : ((i.out' ) : G) ‚Ä¢ ((H : Set G) ‚à© ({g} * ‚ÜëH * {g‚Åª¬π})) * {g} * ‚ÜëH * {g‚Åª¬π} =
      (i.out' : G) ‚Ä¢ (((H : Set G) ‚à© ({g} * ‚ÜëH * {g‚Åª¬π})) * {g} * ‚ÜëH * {g‚Åª¬π}) := by
      simp_rw [smul_mul_assoc]
    rw [hr]
    simp_rw [‚Üê mul_assoc] at this
    conv =>
      enter [1,2]
      rw [this]
    simp_rw [smul_eq_mul_singleton, ‚Üê singleton_mul_singleton, ‚Üê mul_assoc]
  have := iUnion_congr h1
  convert this
  rw [iUnion_mul]

lemma doset_mul_doset_left (g h : G) :
    (doset g H H) * (doset h H H) = (doset (g) H H) * {h} * H := by
  simp_rw [doset, show (H : Set G) * {g} * (H : Set G) * (H * {h} * H) =
    H * {g} * (H * H) * {h} * H by simp_rw [‚Üê mul_assoc], coe_mul_coe H]

lemma doset_mul_doset_right (g h : G) :
    (doset g H H) * (doset h H H) = H * {g} * (doset (h) H H) := by
  simp_rw [doset, show (H : Set G) * {g} * (H : Set G) * (H * {h} * H) =
    H * {g} * (H * H) * {h} * H by simp_rw [‚Üê mul_assoc], coe_mul_coe H, ‚Üê mul_assoc]

lemma doset_mul_doset_eq_union_doset (g h : G) :
    (doset (g : G) (H : Set G) H) * doset (h : G) (H : Set G) H =
        ‚ãÉ (i : H ‚ß∏ (ConjAct.toConjAct h ‚Ä¢ H).subgroupOf H), doset (g * i.out' * h : G) H H := by
  rw [doset_mul_doset_right, doset_eq_iUnion_leftCosets, Set.mul_iUnion]
  simp_rw [doset]
  have h1 : ‚àÄ (i : H ‚ß∏ (ConjAct.toConjAct h ‚Ä¢ H).subgroupOf H),
    (H : Set G) * {g} * (‚Üë(Quotient.out' i) * h) ‚Ä¢ ‚ÜëH = ‚ÜëH * {g * ‚Üë(Quotient.out' i) * h} * ‚ÜëH := by
    intro i
    rw [smul_eq_mul_singleton, show (H : Set G) * {g} * ({‚Üë(Quotient.out' i) * h} * ‚ÜëH) =
      H * {g} * {‚Üë(Quotient.out' i) * h} * ‚ÜëH by simp_rw [‚Üê mul_assoc],
        ‚Üê Set.singleton_mul_singleton, ‚Üê Set.singleton_mul_singleton, ‚Üê Set.singleton_mul_singleton]
    simp_rw [‚Üê mul_assoc]
  apply iUnion_congr h1


/--Finite linear combinations of double cosets `HgH` with `g` in the commensurator of `H`. -/
def ùïã (P : ArithmeticGroupPair G) (Z : Type*) [CommRing Z] := Finsupp (T' P) Z

variable  (P : ArithmeticGroupPair G) (Z : Type*) [CommRing Z]

noncomputable instance (P : ArithmeticGroupPair G) (D : T' P) :
    Fintype (P.H ‚ß∏ ((ConjAct.toConjAct (D.eql.choose : G)) ‚Ä¢ P.H).subgroupOf P.H) := by
  apply Subgroup.fintypeOfIndexNeZero (P.h‚ÇÅ D.eql.choose.2 ).1

lemma rep_mem (a b : Œî) (i : H) : (a : G) * i * b ‚àà Œî := by
  rw [mul_assoc]
  apply Submonoid.mul_mem _ (a.2) (Submonoid.mul_mem _ (h‚ÇÄ i.2) b.2)

/-Test func. not needed
noncomputable def mul' (D1 D2 : T' H Œî) : ùïã H Œî :=
    ((‚àë (i : H ‚ß∏ (ConjAct.toConjAct (D2.elt : G) ‚Ä¢ H).subgroupOf H),
      Finsupp.single (T_mk H Œî D1.h‚ÇÄ D1.h‚ÇÅ ‚ü®((D1.elt : G) * (i.out' : G) * (D2.elt : G)),
        rep_mem H Œî D1.h‚ÇÄ D1.elt D2.elt i.out'‚ü©) (1 : ‚Ñ§) : (T' H Œî) ‚Üí‚ÇÄ ‚Ñ§))
-/

noncomputable instance addCommMonoid : AddCommMonoid (ùïã P Z) :=
  inferInstanceAs (AddCommMonoid ((T' P) ‚Üí‚ÇÄ Z))

/-- Take two doble cosets `HgH` and `HhH`, we define `HgH`*`HhH` by the sum over the double cosets
in `HgHhH`, i.e., if `HgHhH = ‚ãÉ i, HiH` , then `HgH * HhH = ‚àë i, HiH` and then extends
linearly to get multiplication on the finite formal sums of double cosets. -/
noncomputable instance (P : ArithmeticGroupPair G) : Mul (ùïã P Z) where
 mul f g := Finsupp.sum f (fun D1 b‚ÇÅ => g.sum fun D2 b‚ÇÇ =>
    ((‚àë (i : P.H ‚ß∏ (ConjAct.toConjAct (D2.eql.choose : G) ‚Ä¢ P.H).subgroupOf P.H),
      Finsupp.single (T_mk P ‚ü®((D1.eql.choose : G) * (i.out' : G) * (D2.eql.choose : G)),
        rep_mem P.H P.Œî P.h‚ÇÄ D1.eql.choose D2.eql.choose i.out'‚ü©) (b‚ÇÅ * b‚ÇÇ : Z)) : (T' P) ‚Üí‚ÇÄ Z))

lemma mul_def (f g : ùïã P Z) : f * g = Finsupp.sum f (fun D1 b‚ÇÅ => g.sum fun D2 b‚ÇÇ =>
    ((‚àë (i : P.H ‚ß∏ (ConjAct.toConjAct (D2.eql.choose : G) ‚Ä¢ P.H).subgroupOf P.H),
      Finsupp.single (T_mk P ‚ü®((D1.eql.choose : G) * (i.out' : G) * (D2.eql.choose : G)),
        rep_mem P.H P.Œî P.h‚ÇÄ D1.eql.choose D2.eql.choose i.out'‚ü©) (b‚ÇÅ * b‚ÇÇ : Z)) : (T' P) ‚Üí‚ÇÄ Z)) := rfl

noncomputable abbrev T_single (a : T' P) (b : Z) : (ùïã P Z) := Finsupp.single a b

lemma ùïã_mul_singleton (D1 D2 : (T' P)) (a b : Z) :
  (T_single P Z D1 a) * (T_single P Z D2 b) =
    ((‚àë (i : P.H ‚ß∏ (ConjAct.toConjAct (D2.eql.choose : G) ‚Ä¢ P.H).subgroupOf P.H),
      Finsupp.single (T_mk P ‚ü®((D1.eql.choose : G) * (i.out' : G) * (D2.eql.choose : G)),
        rep_mem P.H P.Œî P.h‚ÇÄ D1.eql.choose D2.eql.choose i.out'‚ü©) (a * b : Z)) : (T' P) ‚Üí‚ÇÄ Z) := by
  rw [T_single, mul_def]
  simp only [mul_zero, Finsupp.single_zero, Finset.sum_const_zero, Finsupp.sum_single_index,
    zero_mul, Int.cast_mul]

open Finsupp

noncomputable instance nonUnitalNonAssocSemiring : NonUnitalNonAssocSemiring (ùïã P Z) :=
  {  (addCommMonoid P Z) with
    left_distrib := fun f g h => by
      simp only [mul_def]
      refine Eq.trans (congr_arg (Finsupp.sum f) (funext‚ÇÇ fun a‚ÇÅ b‚ÇÅ => Finsupp.sum_add_index ?_ ?_))
        ?_ <;>
        simp
      intro D1 _ a b
      rw [‚Üê Finset.sum_add_distrib ]
      congr
      group
      simp only [Finsupp.single_add]
    right_distrib := fun f g h => by
      simp only [mul_def]
      refine Eq.trans (Finsupp.sum_add_index ?_ ?_) ?_ <;>
        simp
      intro D1 _ a b
      rw [‚Üê Finsupp.sum_add]
      apply congr_arg
      ext i
      rw [‚Üê Finset.sum_add_distrib ]
      congr
      group
      simp only [Finsupp.single_add]
    zero_mul := fun f => by
      simp only [mul_def]
      exact Finsupp.sum_zero_index
    mul_zero := fun f => by
      simp only [mul_def]
      exact Eq.trans (congr_arg (sum f) (funext‚ÇÇ fun a‚ÇÅ b‚ÇÅ => sum_zero_index)) sum_zero }


noncomputable instance nonUnitalSemiring : NonUnitalSemiring (ùïã P Z) :=
  {nonUnitalNonAssocSemiring P Z  with
    mul_assoc := fun f g h => by sorry} -- known in the 1980s so Kevin can't complain.


/- The identity is `H1H`. -/
noncomputable instance one : One (ùïã P Z) := ‚ü®T_single P Z (T_one P) (1 : Z)‚ü©

theorem one_def : (1 : (ùïã P Z)) = T_single P Z (T_one P) (1 : Z):=
  rfl

noncomputable instance nonAssocSemiring : NonAssocSemiring (ùïã P Z) :=
  { nonUnitalNonAssocSemiring P Z with
    natCast := fun n => T_single P Z (T_one P) (n : Z)
    natCast_zero := by simp
    natCast_succ := fun _ => by simp; rfl
    one_mul :=  fun f => by sorry
      /-
      simp [one_def, mul_def, one_mul, zero_mul, single_zero,
        Finset.sum_const_zero, sum_zero, sum_single_index, T_one, T_mk]

      have := Finsupp.sum_single  f
      nth_rw 2 [‚Üê this]
      congr
      ext D z v
      rw [Finsupp.finset_sum_apply]
      simp_rw [Finsupp.single_apply]
      by_cases h : D = v
      rw [if_pos h]
      have h1 : D.elt = v.elt := by
        rw [h]
      have h2 : D.set = v.set := by
        rw [h]
      simp_rw [h1]
      sorry
      sorry
      -/








    mul_one :=sorry }

noncomputable instance semiring : Semiring (ùïã P Z) :=
  {HeckeRing.nonUnitalSemiring P Z,
    (HeckeRing.nonAssocSemiring P Z) with}

noncomputable instance addCommGroup : AddCommGroup (ùïã P Z) :=
  Finsupp.instAddCommGroup

noncomputable instance nonAssocRing : NonAssocRing (ùïã P Z) :=
  { HeckeRing.addCommGroup P Z,
    (HeckeRing.nonAssocSemiring P Z) with
    intCast := sorry
    intCast_ofNat := sorry
    intCast_negSucc := sorry }

noncomputable instance ring : Ring (ùïã P Z) :=
    {HeckeRing.nonAssocRing P Z, HeckeRing.semiring P Z with }


end HeckeRing
